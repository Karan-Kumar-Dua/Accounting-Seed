global without sharing class PostInstallActions implements InstallHandler {

    @TestVisible private List<GL_Account__c> glAccounts;
    @TestVisible private List<GL_Account__c> glAccountsExpense;
    @TestVisible private List<Ledger__c> ledgers;
    @TestVisible private List<Billing_Format__c> billingFormats;
    @TestVisible private List<Accounting_Settings__c> settings;
    @TestVisible private List<Accounting_Period__c> acctPeriods;
    @TestVisible private List<Time_Card_Period__c> timeCardPeriods;
    @TestVisible private Ledger_Custom_Settings__c ledgerSettings;
    @TestVisible private List<Period_Task__c> accountingPeriodTasks;
    @TestVisible private static final String BILLING_PRODUCT_PDF_PAGE = 'BillingProductIrisPdfHLP';
    @TestVisible private static final String BILLING_SERVICE_PDF_PAGE = 'BillingServiceIrisPdfHLP';
    @TestVisible private static final String BILLING_EMAIL_TEMPLATE = 'Billing_Email_Template';
    @TestVisible private static final String OUTSTANDING_PDF_PAGE = 'BillingOutstandingStmtModernPDF';
    @TestVisible private static final String OUTSTANDING_EMAIL_TEMPLATE = 'Outstanding_Statement_Email_Template';
    @TestVisible private static final String ACTIVITY_PDF_PAGE = 'BillingActivityStmtModernPDF';
    @TestVisible private static final String ACTIVITY_EMAIL_TEMPLATE = 'Activity_Statement_Email_Template';
    @TestVisible private static final String CURRENCY_FORMAT = '$###,##0.00;($###,##0.00)';
    @TestVisible private static final String NUMERIC_FORMAT = '##,##0.00;(##,##0.00)';
    private static final String BILLING_FORMAT_IMAGE = '';

    @TestVisible private static final String CASH_4015_UNAPPLIED_REVENUE = '4015-Unapplied Revenue';
    @TestVisible private static final String CASH_8000_UNAPPLIED_EXPENSE = '8000-Unapplied Expense';
    @TestVisible private static final Map<String, String> GL_ACCT_DEF_SPECS_BY_GL_ACCT_NAMES = new Map<String, String>{
            CASH_4015_UNAPPLIED_REVENUE => GLAccountDefaultsHandler.UNAPPLIED_REVENUE_GL_ACCOUNT,
            CASH_8000_UNAPPLIED_EXPENSE => GLAccountDefaultsHandler.UNAPPLIED_EXPENSE_GL_ACCOUNT
    };

    public class PostInstallException extends Exception {}

    global void onInstall(InstallContext context) {

        if (!context.isUpgrade()) {
            dataSetup();
            // BDC method used for insert binding custom setting records based on binding metadata records 
            //for new install defualt Yodlee to inactive  
            insertBindingCustomSetting(false);
        }   

        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(2,20)) < 0) {
            updateBillingFormats();
        }

        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(2,21)) < 0) {
            createCustomerStatementFormats();
        }

        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,16)) < 0) {
            updatePrepaidExpenseGLAccount();
        }

        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,36)) < 0) {
            populateLedgerInfo();
        }

        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,46)) < 0) {
            setLegacyInventoryValuationMethod();
        }
        //IRVING
        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,51)) < 0) {
            setLineLevelPostAndAutoPostUpgradeSettings();
        }
        //KERMIT
        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,81)) < 0) {
            setAutomatedJobResultsRetentionPeriodSettings();
            setupAccountingPeriodRecurringTaskSampleData();
        }
        //MAGHOME
        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,100)) < 0) {
            setNewInMagHomeFieldsOnAcctSettings();
            updateBillingFormatsEmailDelivery();
        }
        //SUMMER 22
        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,121)) < 0) {
            createAndSetTaxSettings();
        }

        //SPRING 23 Pre 1
        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,133)) < 0) {
            insertBindingCustomSetting(true);
        }  

        //SPRING 23
        if (!context.isUpgrade() || context.previousVersion().compareTo(new Version(3,148)) < 0) {
            createGLAccountDefaultsRecords(!context.isUpgrade());
        }   

        // SUMMER 23 Pre 1
        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,155)) < 0) {
            setAutoPostSourceDocsFields();
            createGLAccountDefaultsRecords(!context.isUpgrade(), true);
        }

        // SUMMER 23 Pre 2
        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,156)) < 0) {
            Payment_Processor__c pp = createPaymentProcessor();
            if(pp != null){
                updatePaymentMethods(pp.Id);
            }
        } 

        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,157)) > 0) {
            sendLedDataAsynchronously();
        }

        //SUMMER 24 Pre 1
        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,235)) < 0) {
            createUnappliedCashGLAccounts();
            createConnectionNameForExistingAccessTokens();
            setCashDisbursementSourcePayable();
        }

        //Summer 24 Pre 2
        //adding this to activateLedgersAsychronously method to be run after ledgers are activated
        /*if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,236)) < 0) {
            createConnectionNameForExistingGLAM();
        }*/


        if (context.isUpgrade() && context.previousVersion().compareTo(new Version(3,235)) <= 0) {
            activateLedgersAsynchronously();
        }

        if (context.isUpgrade() && !Test.isRunningTest()) {
            presetLedgerAccountingMethod(null, LedgerActions.ACCOUNTING_METHOD_ACCRUAL);
        }

    }

    @Future
    public static void createUnappliedCashGLAccounts() {
        try {
            List<String> glAccountNames = new List<String>{
                    CASH_4015_UNAPPLIED_REVENUE,
                    CASH_8000_UNAPPLIED_EXPENSE
            };
            List<GL_Account__c> glAccounts = DomainUtils.getGlAccountsByName(glAccountNames);
            Map<String, GL_Account__c> glAccountsByNames = new Map<String, GL_Account__c>();
            for (GL_Account__c glAccount : glAccounts) {
                glAccountsByNames.put(glAccount.Name, glAccount);
            }

            Map<String, GL_Account__c> unappliedCashGLAccountsByNames = unappliedCashGLAccountsByNames();
            for (String glAccountName : glAccountNames) {
                if (glAccountsByNames.containsKey(glAccountName)) {
                    unappliedCashGLAccountsByNames.remove(glAccountName);
                }
            }

            if (!unappliedCashGLAccountsByNames.isEmpty()) {
                SFDCSecurityUtils.insertProxy(unappliedCashGLAccountsByNames.values());
            }

            Set<Id> ledgeIds = new Set<Id>();
            ledgeIds.addAll(new Map<Id, Ledger__c> (LedgerHandler.getInstanceWithoutSharing().getTransactionalLedgers()).keySet());
            ledgeIds.addAll(new Map<Id, Ledger__c> (LedgerHandler.getInstanceWithoutSharing().getBudgetLedgers()).keySet());

            Map<Id, Map<String, GL_Account_Default__c>> glAccountDefaultsMapByLedgerId = GLAccount.glAccountDefaultsMapByLedgerId(ledgeIds);
            glAccountsByNames.putAll(unappliedCashGLAccountsByNames);

            List<GLAccountDefault> glAccountDefaults = new List<GLAccountDefault>();
            for (Id ledgerId : ledgeIds) {
                for (String glAccountName : glAccountsByNames.keySet()) {
                    String glAcctDef = glAccountDefaultsMapByLedgerId.get(ledgerId)?.get(GL_ACCT_DEF_SPECS_BY_GL_ACCT_NAMES.get(glAccountName))?.GL_Account__c;
                    if (String.isBlank(glAcctDef)) {
                        GL_Account__c glAccount = glAccountsByNames.get(glAccountName);
                        String specification = GL_ACCT_DEF_SPECS_BY_GL_ACCT_NAMES.get(glAccountName);
                        GLAccountDefault def = new GLAccountDefault();
                        def.ledger = LedgerHandler.getInstanceWithoutSharing().getLedgerById(ledgerId);
                        def.glAccount = glAccount;
                        def.glAccountSpecification = new GL_Account_Specification__mdt(DeveloperName = specification);
                        def.glAccountDefault = new GL_Account_Default__c(
                                GL_Account__c = glAccount.Id,
                                GL_Account_Specification__c = specification,
                                Ledger__c = ledgerId
                        );
                        glAccountDefaults.add(def);
                    }
                }
            }
            if (!glAccountDefaults.isEmpty()) {
                GLAccountDefaultActions.isPreventUpdateOverride = true;
                GLAccount.saveDefaults(glAccountDefaults);
                GLAccountDefaultActions.isPreventUpdateOverride = false;
            }
        } catch (Exception e) {}

    }

    @Future
    public static void activateLedgersAsynchronously() {
        try {
            SOQLBuilder theQuery = new SOQLBuilder(Ledger__c.SObjectType);
            theQuery
                    .setEnforceFLS(false)
                    .selectFields(new List<String>{'Id'})
                    .setCondition(GlobalVariables.PACKAGE_QUALIFIER + 'Active__c = false');

            List<Ledger__c> ledgers = (List<Ledger__c>) Database.query(theQuery.toSOQL());
            for (Ledger__c ledger : ledgers) {
                ledger.put(GlobalVariables.PACKAGE_QUALIFIER + 'Active__c', true);
            }
            if (!ledgers.isEmpty()) {
                TriggerObserver.getInstance().unlockField(Ledger__c.Active__c);
                SFDCSecurityUtils.updateProxy(ledgers);
                TriggerObserver.purgeUnlockedFields(Ledger__c.Active__c);
            }
            //call createConnectionNameForExistingGLAM method now that the ledgers are active
            createConnectionNameForExistingGLAM();
        } catch (Exception e) {}
    }

    public static void presetLedgerAccountingMethod(String fromAcctMethod, String toAcctMethod) {
        try {
            SOQLBuilder theQuery = new SOQLBuilder(Ledger__c.SObjectType);
            theQuery
                    .setEnforceFLS(false)
                    .selectFields(new List<String>{'Id'})
                    .setCondition(GlobalVariables.PACKAGE_QUALIFIER + 'Accounting_Method__c =: fromAcctMethod');

            List<Ledger__c> ledgers = (List<Ledger__c>) Database.query(theQuery.toSOQL());
            for (Ledger__c ledger : ledgers) {
                ledger.put(GlobalVariables.PACKAGE_QUALIFIER + 'Accounting_Method__c', toAcctMethod);
            }
            if (!ledgers.isEmpty() && ledgers.size() < 100) {
                TriggerObserver.getInstance().unlockField(Ledger__c.Accounting_Method__c);
                SFDCSecurityUtils.updateProxy(ledgers);
                TriggerObserver.purgeUnlockedFields(Ledger__c.Accounting_Method__c);
            }
        } catch (Exception e) {}
    }

    @future(Callout=true)
    private static void sendLedDataAsynchronously(){
        LEDService.sendData();
    }

    public void setAutoPostSourceDocsFields() {
        try {
            List<SObjectField> fields = new List<SObjectField>{
                Accounting_Settings__c.Auto_Post_Amortization_Entries__c,
                Accounting_Settings__c.Auto_Post_AP_Disbursements__c,
                Accounting_Settings__c.Auto_Post_Billing_Cash_Receipts__c,
                Accounting_Settings__c.Auto_Post_Cash_Receipts__c,
                Accounting_Settings__c.Auto_Post_Inventory_Movements__c
            };

            Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
            Boolean legacyAutoPostSDs = true;
            try {
                legacyAutoPostSDs = (Boolean) acctSettings.get('Auto_Post_Source_Documents__c');
            }
            catch (System.SObjectException sObjEx) {
                //failed attempt to get value from deleted field (Auto_Post_Source_Documents__c is deleted from the package in Spring 24)
            }
            for (SObjectField field : fields) {
                acctSettings.put(field, legacyAutoPostSDs);
            }

            AccountingSettingsActions.isPreventUpdateOverride = true;
            AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = true;
            SFDCSecurityUtils.updateProxy(acctSettings);
            AccountingSettingsActions.isPreventUpdateOverride = false;
            AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = false;
        } catch (Exception ex) {
            throw new PostInstallException(Label.ERR_POST_INSTALL_AUTO_POST_SETTINGS_UPDATE + ' ' + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
    }

    public static void createGLAccountDefaultsRecords(Boolean isFreshInstall) {
        createGLAccountDefaultsRecords(isFreshInstall, false);
    }

    public static void createGLAccountDefaultsRecords(Boolean isFreshInstall, Boolean isRunOnly4Consolidation) {
        Set<Id> ledgeIds = new Set<Id>(LedgerHandler.getInstanceWithoutSharing().getAllLedgersMap().keySet());
        if (isRunOnly4Consolidation) {
            ledgeIds.removeAll(new Map<Id, Ledger__c> (LedgerHandler.getInstanceWithoutSharing().getTransactionalLedgers()).keySet());
            ledgeIds.removeAll(new Map<Id, Ledger__c> (LedgerHandler.getInstanceWithoutSharing().getBudgetLedgers()).keySet());
        }
        createGLAccountDefaultsRecords(isFreshInstall, ledgeIds);
    }

    public static void createGLAccountDefaultsRecords(Boolean isFreshInstall, Set<Id> ledgeIds){
        try{
            if (!isFreshInstall || Test.isRunningTest()) {
                GLAccountDefaultsHandler.instance.setExistedGLAccountsFromSettings();
            }
            GLAccountDefaultActions.isPreventUpdateOverride = true;
            GLAccount.createGLAccountDefaultsByLedger(ledgeIds);
            GLAccountDefaultActions.isPreventUpdateOverride = false;
        }
        catch(Exception ex){
            throw new PostInstallException(Label.ERR_CANNOT_CREATE_GL_ACCOUNTS_DEFAULT + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
    }

    public void insertBindingCustomSetting(Boolean yodleeActive){
        try{
            
            // fetch all Bindings custom setting record if any in map where key will be name of record like yodlee,plaid etc.....
            Map<String, BDC_Binding__c> csBindings = BDC_Binding__c.getAll();
            //list to bulk insert missing bindings custom setting records based on metadata 
            List<BDC_Binding__c> bindingsToInsert = new List<BDC_Binding__c>();

                // if to make sure that custom setting records should only created for Yodlee and Plaid if there is not already a custom setting for them
                if(!csBindings ?.containsKey('Yodlee')){
                    BDC_Binding__c yodleeBinding = new BDC_Binding__c();
                    yodleeBinding.Name = 'Yodlee';
                    yodleeBinding.Type__c = 'AbstractBDCRouter'; 
                    yodleeBinding.To__c = 'YodleeBDCRouter';
                    yodleeBinding.Is_Active__c = yodleeActive;
                    bindingsToInsert.add(yodleeBinding);
                } 
                
                if(!csBindings ?.containsKey('Plaid')){
                    BDC_Binding__c plaidBinding = new BDC_Binding__c();
                    plaidBinding.Name = 'Plaid';
                    plaidBinding.Type__c = 'AbstractBDCRouter'; 
                    plaidBinding.To__c = 'PlaidBDCRouter';
                    plaidBinding.Is_Active__c = false;
                    bindingsToInsert.add(plaidBinding);
                }

            // finally insert all missing records of custom setting in DB.
            SFDCSecurityUtils.insertProxy(bindingsToInsert);
        }
        catch(Exception ex){
            throw new PostInstallException(Label.ERR_CANNOT_INSERT_BINDING_CUSTOM_SETTING + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
    }

    private Boolean isProfessionalEdition() {
        return FinancialSuiteUtils.getSalesforceEdition() == 'Professional Edition';
    }

    private Boolean isAccountingSettingsAndInstanceValid(Accounting_Settings__c acctSettings) {
        return !(FinancialSuiteUtils.isOrganizationInstanceSandbox && acctSettings.Id == NULL);
    }

    /*
    *   1. Populate Default Amortizing Accounts
    *   2. Populate Credit Memo Default value as "Amount"
    * */
    private void setNewInMagHomeFieldsOnAcctSettings() {
        try {
            List<String> queryFields = new List<String>{
                'Id', 'Name'
            };
            String queryCondition = 'Name = \'2500-Deferred Revenue\'';

            SOQLBuilder theQuery = new SOQLBuilder(Gl_Account__c.SObjectType);
            theQuery
                .setEnforceFLS(false)
                .selectFields(queryFields)
                .setCondition(queryCondition)
                .setLimit(1);

            List<GL_Account__c> glAccount2500 = (List<GL_Account__c>) Database.query(theQuery.toSOQL());

            GL_Account__c glAccount1450 = new GL_Account__c(
                Name = '1450-Deferred Expenses',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Assets',
                Sub_Type_2__c = 'Current Assets'
            );
            SFDCSecurityUtils.insertProxy(glAccount1450);

            Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();

            if (isAccountingSettingsAndInstanceValid(acctSettings)) {
                AccountingSettingsActions.isPreventUpdateOverride = true;
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = true;
                acctSettings.Default_Credit_GL_Account_Expense__c = glAccount1450.Id;
                acctSettings.Default_Debit_GL_Account_Revenue__c = !glAccount2500.isEmpty() ? glAccount2500[0].Id : null;

                acctSettings.Credit_Memo_Default__c = 'Amount';

                SFDCSecurityUtils.updateProxy(acctSettings);
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = false;
                AccountingSettingsActions.isPreventUpdateOverride = false;
            }
        }
        catch (Exception ex) {
            throw new PostInstallException(Label.ERR_CANNOT_UPDATE_ACCOUNTING_SETTING + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
    }
    /*
    *   1. create a payment processor 
    *   2. Create payment processor customer for all the accounts where stripe id is populated
    *   3. Update the accounting setting with payment processor Id
    * */
    private Payment_Processor__c createPaymentProcessor() {
        try {
            Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
            if (String.isNotBlank(acctSettings?.Stripe_Connected_Account_Id__c) && !acctSettings.Stripe_Connected_Account_Id__c.trim().equalsIgnoreCase('null')){
                Payment_Processor__c paymentProcessor = new Payment_Processor__c(
                    Connected_Account_Token__c = acctSettings.Stripe_Connected_Account_Id__c,
                    Active__c = true,
                    Test_Mode__c = false,
                    Type__c = PaymentProcessorActions.STRIPE_TYPE, 
                    Name = PaymentProcessorActions.STRIPE_TYPE
                );

                SFDCSecurityUtils.insertProxy(paymentProcessor);

                //repourpose Stripe_Connected_Account_Id__c to hold global default payment processor
                //AccountingSettingsActions.isPreventUpdateOverride = true;
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = true;
                updateAccountingSetting(acctSettings,paymentProcessor);
                //AccountingSettingsActions.isPreventUpdateOverride = false;
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = false;

                List<Account> accts = DomainUtils.getAccountWhereStripeCustomeIdIsPresent();
                //if no accounts then return payment processor
                if(accts.size() == 0){
                    return paymentProcessor;
                }

                //create payment processor customers for all the accounts and attach them with payment processor
                createPaymentProcessorCustomer(paymentProcessor,accts);

                return paymentProcessor;
            }
            return null;
        } catch (Exception ex) {
            throw new PostInstallException(Label.ERR_POST_INSTALL_PMT_PROCESSOR_ERROR + ' ' + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
    }
    /**
     * create payment processor customer for all the accounts
     */
    private void createPaymentProcessorCustomer(Payment_Processor__c paymentProcessor,List<Account> accts){
        List<Payment_Processor_Customer__c> ppcs = new List<Payment_Processor_Customer__c>();
        for(Account acct : accts){
            ppcs.add(new Payment_Processor_Customer__c(
                Account__c = acct.Id, 
                External_Id__c = acct.Stripe_Customer_Id__c,
                Processor__c = paymentProcessor.Id
            ));
        } 
        SFDCSecurityUtils.insertProxy(ppcs);
    }
    /**
     * update payment methods with new payment processor
     */
    @future
    private static void updatePaymentMethods(String ppId){
        try{
            List<Payment_Method__c> payments = DomainUtils.getAllPaymentMethods();
            for(Payment_Method__c pm : payments){
                pm.Payment_Processor__c = ppId;
            }
            SFDCSecurityUtils.updateProxy(payments);
        }catch(Exception e){

        }
    }
    /**
     * update accounting setting stripe Id with payment processor Id
     */
    private void updateAccountingSetting(Accounting_Settings__c acctSettings, Payment_Processor__c pp){
        acctSettings.Stripe_Connected_Account_Id__c = pp.Id;
        SFDCSecurityUtils.updateProxy(acctSettings);
    }
    private void createAndSetTaxSettings() {
        try {
            List<Ledger__c> transLedgers = DomainUtils.getLedgerByType(new Set<String> {'Transactional'});
            if (!transLedgers.isEmpty()) {
                Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
                Tax_Settings__c taxSetting;

                for (Ledger__c ledger : transLedgers) {
                    if (ledger.Tax_Settings__c == null) {
                        taxSetting = taxSetting == null ? getTaxSettings() : taxSetting;
                        ledger.Tax_Settings__c = taxSetting.Id;
                        if (acctSettings.Enable_Avalara_Tax_Calculation__c) {
                            ledger.Sales_Tax_Company_Code__c = acctSettings.Company_Code__c;
                        }
                    }
                }

                SFDCSecurityUtils.updateProxy(transLedgers);
            }
        }
        catch (Exception ex) {
            throw new PostInstallException(Label.ERR_CANNOT_UPDATE_LEDGER_RECORDS + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
    }

    private Tax_Settings__c getTaxSettings() {
        Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
        Tax_Settings__c taxSetting = new Tax_Settings__c();
        taxSetting.Name = acctSettings.Enable_Avalara_Tax_Calculation__c ? TaxSettingsActions.AVA_TAX_METHOD : TaxSettingsActions.NATIVE_TAX_METHOD;
        taxSetting.Tax_Settings_Method__c = acctSettings.Enable_Avalara_Tax_Calculation__c ? TaxSettingsActions.AVA_TAX_METHOD : TaxSettingsActions.NATIVE_TAX_METHOD;
        taxSetting.Sales_Tax_GL_Account__c = acctSettings.Avalara_Sales_Tax_GL_Account__c;
        taxSetting.Sales_Tax_Product__c = acctSettings.Avalara_Tax_Product__c;
        taxSetting.Sales_Tax_Calculation_Mode__c = getTaxCalcModeFromAcctSettings(acctSettings);

        if (isAddressPopulated(acctSettings)) {
            taxSetting.Origin_Address__c = getOriginAddress().Id;
        }
        if (acctSettings.Enable_Avalara_Tax_Calculation__c) {
            taxSetting.AvaTax_License__c = getAvalaraLicense().Id;
        }
        TaxSettingsActions.isPreventUpdateOverride = true;
        SFDCSecurityUtils.insertProxy(taxSetting);
        TaxSettingsActions.isPreventUpdateOverride = false;
        return taxSetting;
    }

    private String getTaxCalcModeFromAcctSettings(Accounting_Settings__c settings) {
        String result;
        if (settings.Tax_Calculation_Mode__c == 'POS') {
            result = 'Point of Sale';
        }
        else if (settings.Tax_Calculation_Mode__c == 'POD') {
            result = 'Point of Destination';
        }
        else if (settings.Tax_Calculation_Mode__c == 'Shipment') {
            result = 'Shipment';
        }
        return result;
    }

    private Boolean isAddressPopulated(Accounting_Settings__c acctSettings) {
        return acctSettings.City__c != null
            && acctSettings.Country_Code__c != null
            && acctSettings.Postal_Code__c != null
            && acctSettings.Region__c != null
            && acctSettings.Street__c != null;
    }

    private Address__c getOriginAddress() {
        Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
        Address__c address = new Address__c();
        address.City__c = acctSettings.City__c;
        address.Country_Code__c = acctSettings.Country_Code__c;
        address.Postal_Code__c = acctSettings.Postal_Code__c;
        address.State_Province__c = acctSettings.Region__c;
        address.Street__c = acctSettings.Street__c;

        SFDCSecurityUtils.insertProxy(address);
        return address;
    }

    private AvaTax_License__c getAvalaraLicense() {
        Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
        AvaTax_License__c newLicense = new AvaTax_License__c();
        newLicense.Active_AvaTax_Endpoint__c = acctSettings.Avalara_Production_Endpoint__c ? 'Production' : 'Sandbox';
        newLicense.AvaTax_Account_ID__c = acctSettings.Avalara_Account_Id__c;
        newLicense.AvaTax_License_Key__c = acctSettings.Avalara_License_Key__c;

        SFDCSecurityUtils.insertProxy(newLicense);
        return newLicense;
    }

    private void updateBillingFormatsEmailDelivery(){
        try {
            List<Billing_Format__c> billingFormats = new List<Billing_Format__c>();
            List<String> queryFields = new List<String>{
                'Id', 'Automated_Email_Delivery2__c', 'Automated_Email_Delivery__c'
            };

            SOQLBuilder theQuery = new SOQLBuilder(Billing_Format__c.SObjectType);
            theQuery
                .setEnforceFLS(false)
                .selectFields(queryFields)
                .setLimit(50000);

            billingFormats = Database.query(theQuery.toSOQL());

            for (Billing_Format__c billFormat : billingFormats) {
               switch on billFormat.Automated_Email_Delivery__c {
                    when 'Balance Due' {		
                        billFormat.Automated_Email_Delivery2__c = 'Balance Due Only';
                    }
                    when 'Zero Balance' {		
                        billFormat.Automated_Email_Delivery2__c = 'Zero Balance Only';
                    }	
                    when 'No Delivery' {		
                        billFormat.Automated_Email_Delivery2__c = 'No Delivery';
                    }		
                }
            }
            
            SFDCSecurityUtils.updateProxy(billingFormats);
        }
        catch (Exception ex) {
            
        }

    }

    private void setLegacyInventoryValuationMethod() {
        try {
            Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
            if (isAccountingSettingsAndInstanceValid(acctSettings)) {
                acctSettings.Inventory_Valuation_Method__c = 'Standard Cost';
                AccountingSettingsActions.isPreventUpdateOverride = true;
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = true;
                SFDCSecurityUtils.updateProxy(acctSettings);
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = false;
                AccountingSettingsActions.isPreventUpdateOverride = false;
            }
        }
        catch (Exception ex) {
            throw new PostInstallException(Label.ERR_CANNOT_UPDATE_ACCOUNTING_SETTING + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
    }

    private void setLineLevelPostAndAutoPostUpgradeSettings() {
        try {
            Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
            if (isAccountingSettingsAndInstanceValid(acctSettings)) {
                AccountingSettingsActions.isPreventUpdateOverride = true;
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = true;
                acctSettings.Post_Settings__c = 'Line-Level Post';
                SFDCSecurityUtils.updateProxy(acctSettings);
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = false;
                AccountingSettingsActions.isPreventUpdateOverride = false;
            }
        }
        catch (Exception ex) {
            throw new PostInstallException(Label.ERR_CANNOT_UPDATE_ACCOUNTING_SETTING + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
    }

    private void setAutomatedJobResultsRetentionPeriodSettings() {
        try {
            Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
            if (isAccountingSettingsAndInstanceValid(acctSettings)) {
                AccountingSettingsActions.isPreventUpdateOverride = true;
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = true;
                acctSettings.Enable_Retention_Period__c = false;
                acctSettings.Automated_Job_Results_Retention_Days__c = 30;
                SFDCSecurityUtils.updateProxy(acctSettings);
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = false;
                AccountingSettingsActions.isPreventUpdateOverride = false;
            }
        }
        catch (Exception ex) {
            throw new PostInstallException(Label.ERR_CANNOT_UPDATE_ACCOUNTING_SETTING + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
    }

    private void populateLedgerInfo() {
        try {
            //get Accounting Settings record
            Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
            //prevent update settings when environment is sandbox and accounting setting row does not exist
            if (isAccountingSettingsAndInstanceValid(acctSettings)) {
                //fill Ledger custom setting
                ledgerSettings = Ledger_Custom_Settings__c.getOrgDefaults();
                ledgerSettings.Ledger_Id__c = acctSettings.Default_Ledger__c;
                SFDCSecurityUtils.upsertProxy(ledgerSettings);
                //update some Ledger related fields on Accounting Settings record
                acctSettings.Legacy_Default_Ledger__c = acctSettings.Default_Ledger__c;
                acctSettings.Ledger_Limit__c = 1;
                AccountingSettingsActions.isPreventUpdateOverride = true;
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = true;
                SFDCSecurityUtils.updateProxy(acctSettings);
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = false;
                AccountingSettingsActions.isPreventUpdateOverride = false;
            }
        }
        catch (Exception ex) {
            throw new PostInstallException(Label.ERR_CANNOT_UPDATE_ACCOUNTING_SETTING_OR_LEDGER_RECORDS + ex.getMessage() + '\n' + ex.getStackTraceString());
        }

        try {
            //All existed Transactional Ledgers in an organization must be updated;
            //Default PDF formats and Default Bank Account will be carried over from Accounting Settings record.
            Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
            //prevent update settings when environment is sandbox and accounting setting row does not exist
            if (isAccountingSettingsAndInstanceValid(acctSettings)) {
                List<Ledger__c> transLedgers = DomainUtils.getLedgerByType(new Set<String> {'Transactional'});
                if (!transLedgers.isEmpty()) {
                    for (Ledger__c ledger : transLedgers) {
                        //move PDF formats from Accounting Settings
                        ledger.Billing_Activity_Statement_Format__c = acctSettings.Billing_Activity_Statement_Format__c;
                        ledger.Billing_Outstanding_Statement_Format__c = acctSettings.Billing_Outstanding_Statement_Format__c;
                        ledger.Default_Billing_Format__c = acctSettings.Default_Billing_Format__c;
                        ledger.Default_Purchase_Order_Format__c = acctSettings.Default_Purchase_Order_Format__c;
                        ledger.Default_Packing_Slip_Format__c = acctSettings.Default_Packing_Slip_Format__c;
                        //move Bank Account from Accounting Settings
                        ledger.Default_Bank_Account__c = acctSettings.Default_Bank_Account__c;
                    }

                    TriggerObserver.getInstance().unlockFields(new Set<SObjectField>{
                            Ledger__c.Billing_Activity_Statement_Format__c,
                            Ledger__c.Billing_Outstanding_Statement_Format__c,
                            Ledger__c.Default_Billing_Format__c,
                            Ledger__c.Default_Purchase_Order_Format__c,
                            Ledger__c.Default_Packing_Slip_Format__c,
                            Ledger__c.Default_Bank_Account__c
                    });
                    SFDCSecurityUtils.updateProxy(transLedgers);
                    TriggerObserver.purgeUnlockedFields(new Set<SObjectField>{
                            Ledger__c.Billing_Activity_Statement_Format__c,
                            Ledger__c.Billing_Outstanding_Statement_Format__c,
                            Ledger__c.Default_Billing_Format__c,
                            Ledger__c.Default_Purchase_Order_Format__c,
                            Ledger__c.Default_Packing_Slip_Format__c,
                            Ledger__c.Default_Bank_Account__c
                    });
                }

                List<GL_Account_Mapping__c> updateGLMappings = new List<GL_Account_Mapping__c>();
                for (GL_Account_Mapping__c glm : DomainUtils.getGLAccountMappings(false)) {
                    if (glm.Ledger__c == NULL) {
                        glm.Ledger__c = acctSettings.Default_Ledger__c;
                        updateGLMappings.add(glm);
                    }
                }

                SFDCSecurityUtils.updateProxy(updateGLMappings);
            }
        }
        catch (Exception ex) {
            throw new PostInstallException(Label.ERR_CANNOT_UPDATE_LEDGER_OR_GL_ACCOUNT_MAPPING_RECORDS + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
    }

    private void updateBillingFormats() {
        try {
            List<Billing_Format__c> billingFormats = new List<Billing_Format__c>();
            List<String> queryFields = new List<String>{
                'Id', 'Visualforce_PDF_Page__c', 'Default_Email_Template__c'
            };

            SOQLBuilder theQuery = new SOQLBuilder(Billing_Format__c.SObjectType);
            theQuery
                .setEnforceFLS(false)
                .selectFields(queryFields)
                .setLimit(50000);

            for (Billing_Format__c billFormat : (List<Billing_Format__c>) Database.query(theQuery.toSOQL())) {
                billFormat.Visualforce_PDF_Page__c = BILLING_PRODUCT_PDF_PAGE;
                billFormat.Default_Email_Template__c = BILLING_EMAIL_TEMPLATE;
                billFormat.Type__c = 'Billing';
                billFormat.Currency_Format__c = CURRENCY_FORMAT;
                billFormat.Numeric_Format__c = NUMERIC_FORMAT;
                billingFormats.add(billFormat);
            }
            
            SFDCSecurityUtils.updateProxy(billingFormats);
        }
        catch (Exception ex) {
            
        }
    }

    private void updatePrepaidExpenseGLAccount() {
        try {
            List<String> qur = new List<String>();
            List<Billing_Format__c> billingFormats = new List<Billing_Format__c>();

            List<String> queryFields = new List<String>{
                'Id', 'Name'
            };
            String queryCondition = 'Name = \'1400-Prepaid Expenses\'';

            SOQLBuilder theQuery = new SOQLBuilder(Gl_Account__c.SObjectType);
            theQuery
                .setEnforceFLS(false)
                .selectFields(queryFields)
                .setCondition(queryCondition)
                .setLimit(1);

            GL_Account__c glAccount = (GL_Account__c) Database.query(theQuery.toSOQL());
            if (AccountingSettingsHandler.getAccountingSettings().Prepaid_Expense_GL_Account__c == NULL) {
                AccountingSettingsHandler.getAccountingSettings().Prepaid_Expense_GL_Account__c = glAccount.Id;
                SFDCSecurityUtils.updateProxy(AccountingSettingsHandler.getAccountingSettings());
            }
        }
        catch (Exception ex) {
            
        }
    }

    private static Map<String, GL_Account__c> unappliedCashGLAccountsByNames() {
        return new Map<String, GL_Account__c>{
                // 28
                CASH_4015_UNAPPLIED_REVENUE => new GL_Account__c(
                        Name = CASH_4015_UNAPPLIED_REVENUE,
                        Active__c = true,
                        Bank__c = false,
                        Type__c = 'Revenue'
                ),
                // 29
                CASH_8000_UNAPPLIED_EXPENSE => new GL_Account__c(
                        Name = CASH_8000_UNAPPLIED_EXPENSE,
                        Active__c = true,
                        Bank__c = false,
                        Type__c = 'Expense',
                        Sub_Type_1__c = 'General & Administrative'
                )
        };
    }

    private void createCustomerStatementFormats() {
        try {
            List<Billing_Format__c> billingFormats = new List<Billing_Format__c>();
            Billing_Format__c outstandingFormat = new Billing_Format__c();
            outstandingFormat.Name = 'Default Billing Outstanding Statement';
            outstandingFormat.Visualforce_PDF_Page__c = OUTSTANDING_PDF_PAGE;
            outstandingFormat.Default_Email_Template__c = OUTSTANDING_EMAIL_TEMPLATE;
            outstandingFormat.Type__c = 'Outstanding Statement';
            outstandingFormat.Image__c = '<img alt="Accounting Seed Logo" src="data:image/jpeg;base64,' + BILLING_FORMAT_IMAGE + '"></img>';
            outstandingFormat.Currency_Format__c = CURRENCY_FORMAT;
            outstandingFormat.Numeric_Format__c = NUMERIC_FORMAT;
            billingFormats.add(outstandingFormat);
            
            Billing_Format__c activityFormat = new Billing_Format__c();
            activityFormat.Name = 'Default Billing Activity Statement';
            activityFormat.Visualforce_PDF_Page__c = ACTIVITY_PDF_PAGE;
            activityFormat.Default_Email_Template__c = ACTIVITY_EMAIL_TEMPLATE;
            activityFormat.Type__c = 'Activity Statement';
            activityFormat.Image__c = '<img alt="Accounting Seed Logo" src="data:image/jpeg;base64,' + BILLING_FORMAT_IMAGE + '"></img>';
            activityFormat.Currency_Format__c = CURRENCY_FORMAT;
            activityFormat.Numeric_Format__c = NUMERIC_FORMAT;
            billingFormats.add(activityFormat);
            
            SFDCSecurityUtils.insertProxy(billingFormats);
            
            List<Accounting_Settings__c> settings = new List<Accounting_Settings__c>();

            SOQLBuilder theQuery = new SOQLBuilder(Accounting_Settings__c.SObjectType);
            theQuery
                .setEnforceFLS(false)
                .setLimit(1000);

            for (Accounting_Settings__c setting : (List<Accounting_Settings__c>) Database.query(theQuery.toSOQL())) {
                setting.Billing_Outstanding_Statement_Format__c = billingFormats[0].Id;
                setting.Billing_Activity_Statement_Format__c = billingFormats[1].Id;
                settings.add(setting);
            }
            
            SFDCSecurityUtils.updateProxy(settings);
        }
        catch (Exception ex) {
            
        }
    }

    /*   
    * Summer24pre1 added a BDC feature to allow for multiple connections. 
    * The names of these connections were added to the access token custom setting.
    * This function sets those names on release so they are not null.
    */   
    @TestVisible
    private static void createConnectionNameForExistingAccessTokens() {
        List<BDC_Access_Tokens__c> allExistingAccessTokens = BDC_Access_Tokens__c.getAll().values();
        List<BDC_Access_Tokens__c> nullNameTokens = new List<BDC_Access_Tokens__c>();
        Map<String, Integer> instIdToNumberOfNamesToCreate = new Map<String, Integer>();

        //filter out any tokens with null identity names to get the count of the number of names to be created for existing tokens
        for (BDC_Access_Tokens__c aToken : allExistingAccessTokens) {
            if (aToken.Identity_Name__c == null) {
                String finInstId = aToken.Financial_Institution_Id__c;
                if (instIdToNumberOfNamesToCreate.get(finInstId) == null) {
                    instIdToNumberOfNamesToCreate.put(finInstId, 1);
                } else {
                    Integer previousNum = instIdToNumberOfNamesToCreate.get(finInstId);
                    instIdToNumberOfNamesToCreate.put(finInstId, previousNum + 1);
                }
                nullNameTokens.add(aToken);
            }    
        }    

        Integer tokenCounter = 0; 
        Map<String, List<String>> newNames = PlaidBDCIdentityComparator.createNewConnectionNames(instIdToNumberOfNamesToCreate);

        //a counter to keep track of which generated names have been used
        Map<String, Integer> institutionCounters = new Map<String, Integer>();
        for (String instId : newNames.keySet()) {
            institutionCounters.put(instId, 0);
        }
        for (BDC_Access_Tokens__c aToken : nullNameTokens) {
            Integer instCount = institutionCounters.get(aToken.Financial_Institution_Id__c);
            aToken.Identity_Name__c = newNames.get(aToken.Financial_Institution_Id__c)[instCount];
            institutionCounters.put(aToken.Financial_Institution_Id__c, instCount + 1);
        }    
        SFDCSecurityUtils.updateProxy(nullNameTokens);
    }

    /*
    * When the connection name field was added to the GLAM, previously existing GLAMS would had nulls in the field. 
    * This populats the connection names on those existing GLAMs
    */
    @TestVisible
    private static void createConnectionNameForExistingGLAM() {
        GLAccountMappingActions.isDmlRestrictionBypassEnabled = true;
        //find all glams with null connection name
        List<GL_Account_Mapping__c> glamsWithNoName = [SELECT Id, Connection_Name__c, Financial_Institution_Id__c FROM GL_Account_Mapping__c 
            WHERE Source__c = 'Plaid' AND Financial_Institution_Id__c != null AND Inactive__c = false AND Connection_Name__c = null];

        //the access tokens contain the name and identity id.
        List<BDC_Access_Tokens__c> accTokens = BDC_Access_Tokens__c.getAll().values();
        Map<String, BDC_Access_Tokens__c> idenIdToToken = new Map<String, BDC_Access_Tokens__c>();
        for (BDC_Access_Tokens__c aToken : accTokens) {
            idenIdToToken.put(aToken.Financial_Institution_Identity_Id__c, aToken); 
        }

        //update the connection name GLAM by matching it to the access token via the identity id
        for (GL_Account_Mapping__c glamNoName : glamsWithNoName) {
            glamNoName.Connection_Name__c = idenIdToToken.get(glamNoName.Financial_Institution_Id__c).Identity_Name__c;
        }
        SFDCSecurityUtils.updateProxy(glamsWithNoName);
        GLAccountMappingActions.isDmlRestrictionBypassEnabled = false;

    }



    private void setCashDisbursementSourcePayable(){
        try {
            Accounting_Settings__c acctSettings = AccountingSettingsHandler.getAccountingSettings();
            if(acctSettings.Cash_Disbursement_Source__c == NULL){
                acctSettings.Cash_Disbursement_Source__c = 'Payable';
                AccountingSettingsActions.isPreventUpdateOverride = true;
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = true;
                SFDCSecurityUtils.updateProxy(acctSettings);
                AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = false;
                AccountingSettingsActions.isPreventUpdateOverride = false;                
            }
        }
        catch (Exception ex) {
            throw new PostInstallException(Label.ERR_CANNOT_UPDATE_ACCOUNTING_SETTING_OR_LEDGER_RECORDS + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
        
    }

    public void setupAccountingPeriodRecurringTaskSampleData() {
        //weekly, monthy, quarterly
        Date createDate = System.today().toStartOfMonth().addMonths(1);
        Date dueDate10 = createDate.addDays(9);
        Date dueDate15 = createDate.addDays(14);
        Date dueDateLastOfMonth = createDate.addMonths(1).addDays(-1);
        //annual
        Date createDateJan = date.newinstance(System.Date.today().addYears(1).year(), 1, 1);
        Date dueDateJan10 = date.newinstance(System.Date.today().addYears(1).year(), 1, 10);
        Date dueDateJan31 = date.newinstance(System.Date.today().addYears(1).year(), 1, 31);

        accountingPeriodTasks = new list<Period_Task__c>();
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'CLOSE: Verify all source records in the accounting period are posted.',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Verify all source records are posted prior to month-end close. Review unposted [source object] reports in Accounting Reports folder.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 1,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'CLOSE: Record month-end accruals',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'For accrual-based accounting, record transactions in the period in which they occur, regardless of the timing of payments.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 2,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'CLOSE: Record reversing-entries',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Record reversing entries in a subsequent accounting period to remove adjusting accrual entries that were made in the prior accounting period.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 3,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'CLOSE: Reconcile balance sheet accounts to sub-ledgers',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Reconcile GL balances of balance sheet accounts to any sub-ledgers (i.e. Inventory, Fixed Asset, Prepaid, etc.)',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 4,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'CLOSE: Close system Accounting Period',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Close the period to generate financial cubes and aging history records to generate financial statements and A/R & A/P Historical Agings.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 5,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'PAYROLL: Process payroll',
                Accounting_Period_Offset__c = '0',
                Comments__c = 'Process payroll from your payroll processor.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate15,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Weeks',
                Never__c = true,
                Priority__c = 'High',
                Frequency_Num__c = 2,
                Sort_Order__c = 6,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'CASH: Record all cash receipts',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Verify all received cash receipts are posted.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 7,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'CASH: Review outstanding check list for checks aged 60+ days',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Review outstanding checks not cashed for reissuance or void.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 8,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'CASH: Reconcile Bank Accounts',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Perform reconciliations for all bank and credit card accounts.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 9,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'AR/SALES: Review Customer Accounts Receivable past due',
                Accounting_Period_Offset__c = '0',
                Comments__c = 'Perform Days Sales Outstanding analysis and review of all at-risk receivables.',
                Create_Date__c = createDate,
                Due_Date__c = dueDateLastOfMonth,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Weeks',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 2,
                Sort_Order__c = 10,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'AR/SALES: Reconcile A/R Aging-Historical to the Trial Balance',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Reconcile the AR Aging sub-ledger to the Balance Sheet or Trial Balance.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 11,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'AR/SALES: Recognize revenue',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Review all outstanding contracts and perform revenue recognition/deferred revenue analyses.  Record earned revenue.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 12,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'AP/EXPENSE: Process Vendor Accounts Payable',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Record all received vendor invoices and evaluate for check run.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 13,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'AP/EXPENSE: Reconcile A/P Aging-Historical to the Trial Balance',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Reconcile the AP Aging sub-ledger to the Balance Sheet or Trial Balance.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 14,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'REPORTING: Generate Financial Statements',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Generate finalized P&L, Balance Sheet, Trial Balance, Cash Flow and ancillary statements or schedules',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 15,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'REPORTING: Perform variance and gross margin analysis on profit & loss accounts',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Analyses such as 12 month rolling trend analysis, current vs prior month, current year vs prior year, etc.',
                Create_Date__c = createDate,
                Due_Date__c = dueDate10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 16,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'TAX: Review sales tax and make quarterly payments',
                Accounting_Period_Offset__c = '-1',
                Comments__c = 'Pay estimated quarterly tax.',
                Create_Date__c = createDateJan,
                Due_Date__c = dueDateJan10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Months',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 3,
                Sort_Order__c = 17,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'TAX: File Forms 1099 and W-2',
                Accounting_Period_Offset__c = '0',
                Comments__c = 'File Forms 1099 for non-employee compensation and W-2 for employees',
                Create_Date__c = createDateJan,
                Due_Date__c = dueDateJan31,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Years',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 18,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'TAX: Update mileage reimbursement rate',
                Accounting_Period_Offset__c = '0',
                Comments__c = 'Update the Mileage GL account annually for new IRS mileage reimbursement rates',
                Create_Date__c = createDateJan,
                Due_Date__c = dueDateJan10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Years',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 19,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'ADMIN: Create new Accounting Periods for next 12 months',
                Accounting_Period_Offset__c = '0',
                Comments__c = 'Recommended best practice to maintain a minimum of 12 future accounting periods in the system.',
                Create_Date__c = createDateJan,
                Due_Date__c = dueDateJan10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Years',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 20,
                Status__c = 'Not Started'
            )
        );
        accountingPeriodTasks.add(
            new Period_Task__c(
                Name = 'ADMIN: Verify Form 1099 Box elections for 1099 vendors haven\'t changed',
                Accounting_Period_Offset__c = '0',
                Comments__c = 'If IRS changes Form 1099-MISC or Form 1099-NEC, then all affected 1099 vendors will have to be remapped to the correct Form Box mappings annually.',
                Create_Date__c = createDateJan,
                Due_Date__c = dueDateJan10,
                Ends_On__c = 'Never',
                Exclude_from_Automation__c = false,
                Frequency_Type__c = 'Years',
                Never__c = true,
                Priority__c = 'Normal',
                Frequency_Num__c = 1,
                Sort_Order__c = 21,
                Status__c = 'Not Started'
            )
        );

        try {
            SFDCSecurityUtils.insertProxy(accountingPeriodTasks);
        }
        catch (Exception ex) {
            throw new PostInstallException(Label.ERR_CANNOT_CREATE_ACCOUNTING_PERIOD_RECURRING_TASK_RECORDS + ex.getMessage() + '\n' + ex.getStackTraceString());
        }
    }

    public void dataSetup() {
        glAccounts = new List<GL_Account__c>();
        // 0
        glAccounts.add(
            new GL_Account__c(
                Name = '1000-Cash',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Bank__c = true,
                Sub_Type_1__c = 'Assets',
                Sub_Type_2__c = 'Cash'
            )
        );
        // 1
        glAccounts.add(
            new GL_Account__c(
                Name = '1200-Accounts Receivable',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Assets',
                Sub_Type_2__c = 'Current Assets'                
            )
        );
        // 2
        glAccounts.add(
            new GL_Account__c(
                Name = '1205-Unapplied A/R',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Assets',
                Sub_Type_2__c = 'Current Assets'
            )
        );
        // 3
        glAccounts.add(
            new GL_Account__c(
                Name = '1600-Work In Process',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Assets',
                Sub_Type_2__c = 'Current Assets'        
            )
        );
        // 4
        glAccounts.add(
            new GL_Account__c(
                Name = '2000-Accounts Payable',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Liabilities',
                Sub_Type_2__c = 'Current Liabilities'       
            )
        );
        // 5
        glAccounts.add(
            new GL_Account__c(
                Name = '2010-Vouchers Payable',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Liabilities',
                Sub_Type_2__c = 'Current Liabilities'       
            )
        );
        // 6
        glAccounts.add(
            new GL_Account__c(
                Name = '2020-Accrued Expenses',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Liabilities',
                Sub_Type_2__c = 'Current Liabilities'       
            )
        );
        // 7 
        glAccounts.add(
            new GL_Account__c(
                Name = '3000-Owners Equity',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Owners Equity',
                Sub_Type_2__c = 'Equity'        
            )
        );
        // 8
        glAccounts.add(
            new GL_Account__c(
                Name = '3050-Retained Earnings',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Owners Equity',
                Sub_Type_2__c = 'Equity'    
            )
        );
        // 9
        glAccounts.add(
            new GL_Account__c(
                Name = '3060-Current Year Earnings',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Owners Equity',
                Sub_Type_2__c = 'Equity'    
            )
        );
        // 10
        glAccounts.add(
            new GL_Account__c(
                Name = '4000-Product Revenue',
                Active__c = true,
                Type__c = 'Revenue',
                Sub_Type_1__c = 'Product Revenue',
                Sub_Type_2__c = 'Product Family 1'  
            )
        );
        // 11
        glAccounts.add(
            new GL_Account__c(
                Name = '4010-Services Revenue',
                Active__c = true,
                Type__c = 'Revenue',
                Sub_Type_1__c = 'Service Revenue',
                Sub_Type_2__c = 'Service Family 1'  
            )
        );
        // 12
        glAccounts.add(
            new GL_Account__c(
                Name = '5000-Cost of Goods Sold',
                Active__c = true,
                Type__c = 'Expense',
                Sub_Type_1__c = 'Cost of Goods Sold',
                Sub_Type_2__c = 'Materials'
            )
        );
        // 13
        glAccounts.add(
            new GL_Account__c(
                Name = '5040-Vendor Payment Discounts',
                Active__c = true,
                Type__c = 'Expense',
                Sub_Type_1__c = 'Cost of Goods Sold',
                Sub_Type_2__c = 'Materials'
            )
        );
        // 14
        glAccounts.add(
            new GL_Account__c(
                Name = '5050-Labor',
                Active__c = true,
                Type__c = 'Expense',
                Sub_Type_1__c = 'Labor',
                Sub_Type_2__c = 'Salary & Wages'
            )
        );
        // 15
        glAccounts.add(
            new GL_Account__c(
                Name = '6000-Marketing Expense',
                Active__c = true,
                Type__c = 'Expense',
                Sub_Type_1__c = 'Sales & Marketing',
                Sub_Type_2__c = 'Marketing Events'
            )
        );
        // 16
        glAccounts.add(
            new GL_Account__c(
                Name = '7000-Facilities Expense',
                Active__c = true,
                Type__c = 'Expense',
                Sub_Type_1__c = 'Facilities',
                Sub_Type_2__c = 'Rent'         
            )
        );
        // 17
        glAccounts.add(
            new GL_Account__c(
                Name = '7050-Telecommunications',
                Active__c = true,
                Type__c = 'Expense',
                Sub_Type_1__c = 'Facilities',
                Sub_Type_2__c = 'Utilities'            
            )
        );
        // 18
        glAccounts.add(
            new GL_Account__c(
                Name = '2030-Accrued Payroll',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Liabilities',
                Sub_Type_2__c = 'Current Liabilities'
            )
        );
        // 19
        glAccounts.add(
            new GL_Account__c(
                Name = '4900-Customer Payment Discounts',
                Active__c = true,
                Bank__c = false,
                Type__c = 'Revenue',
                Sub_Type_1__c = 'Product Revenue',
                Sub_Type_2__c = 'Product Family 1'
            )
        );
        // 20
        glAccounts.add(
            new GL_Account__c(
                Name = '1500-Inventory',
                Active__c = true,
                Bank__c = false,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Assets',
                Sub_Type_2__c = 'Current Assets'
            )
        );
        //=======================================================
        //========== New GL Accounts since 08/09/2016 ===========
        //=======================================================
        // 21
        glAccounts.add(
            new GL_Account__c(
                Name = '1400-Prepaid Expenses',
                Active__c = true,
                Bank__c = false,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Assets',
                Sub_Type_2__c = 'Current Assets'
            )
        );
        // 22
        glAccounts.add(
            new GL_Account__c(
                Name = '1700-Accumulated Depreciation',
                Active__c = true,
                Bank__c = false,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Assets',
                Sub_Type_2__c = 'Fixed Assets'
            )
        );
        // 23
        glAccounts.add(
            new GL_Account__c(
                Name = '2500-Deferred Revenue',
                Active__c = true,
                Bank__c = false,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Liabilities',
                Sub_Type_2__c = 'Current Liabilities'
            )
        );
        // 24
        glAccounts.add(
            new GL_Account__c(
                Name = '3900-Opening Balances',
                Active__c = true,
                Bank__c = false,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Owners Equity',
                Sub_Type_2__c = 'Equity'
            )
        );
        // 25
        glAccounts.add(
            new GL_Account__c(
                Name = '6500-Depreciation Expense',
                Active__c = true,
                Bank__c = false,
                Type__c = 'Expense',
                Sub_Type_1__c = 'General & Administrative',
                Sub_Type_2__c = 'Software'
            )
        );

        // 26
        glAccounts.add(
            new GL_Account__c(
                Name = '3070-Equity Adjustments',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Owners Equity',
                Sub_Type_2__c = 'Equity'
            )
        );
        //=======================================================
        //========== New GL Accounts since 11/03/2021 ===========
        //=======================================================
        // 27
        glAccounts.add(
            new GL_Account__c(
                Name = '1450-Deferred Expenses',
                Active__c = true,
                Type__c = 'Balance Sheet',
                Sub_Type_1__c = 'Assets',
                Sub_Type_2__c = 'Current Assets'
            )
        );
        //=======================================================
        //========== New GL Accounts since 09/26/2023 ===========
        //=======================================================
        // 28, 29
        glAccounts.addAll(unappliedCashGLAccountsByNames().values());
        //=======================================================

        SFDCSecurityUtils.insertProxy(glAccounts);

        glAccountsExpense = new List<GL_Account__c>();
        // 0
        glAccountsExpense.add(
            new GL_Account__c(
                Name = '6050-Travel Expenses',
                Active__c = true,
                Type__c = 'Expense',
                Expense_Report_Name__c = 'Travel Expenses',
                Billing_Description__c = 'Travel Expenses',
                TM_Revenue_Conversion__c = glAccounts[11].Id,
                Sub_Type_1__c = 'Sales & Marketing',
                Sub_Type_2__c = 'Sales Travel'
            )
        );
        // 1
        glAccountsExpense.add(
            new GL_Account__c(
                Name = '6060-Meals and Entertainment',
                Active__c = true,
                Type__c = 'Expense',
                Used_In_Expense_Reports__c = true,
                Expense_Report_Name__c = 'Meals and Entertainment',
                Billing_Description__c = 'Meals and Entertainment',
                TM_Revenue_Conversion__c = glAccounts[11].Id,
                Sub_Type_1__c = 'Sales & Marketing',
                Sub_Type_2__c = 'Sales Travel'
            )
        );
        // 2
        glAccountsExpense.add(
            new GL_Account__c(
                Name = '6070-Mileage',
                Active__c = true,
                Type__c = 'Expense',
                Used_In_Expense_Reports__c = true,
                Expense_Report_Name__c = 'Mileage',
                Billing_Description__c = 'Mileage',
                Mileage_Account__c = true,
                Mileage_Rate__c = .52,
                TM_Revenue_Conversion__c = glAccounts[11].Id,
                Sub_Type_1__c = 'Sales & Marketing',
                Sub_Type_2__c = 'Sales Travel'           
            )
        );
        
        SFDCSecurityUtils.insertProxy(glAccountsExpense);

        billingFormats = new List<Billing_Format__c>();
        billingFormats.add(
            new Billing_Format__c(
                Name = 'Default Billing Product',
                Visualforce_PDF_Page__c = BILLING_PRODUCT_PDF_PAGE,
                Default_Email_Template__c = BILLING_EMAIL_TEMPLATE,
                Type__c = 'Billing',
                Image__c = '<img alt="Accounting Seed Logo" src="data:image/jpeg;base64,' + BILLING_FORMAT_IMAGE + '"></img>',
                Currency_Format__c = CURRENCY_FORMAT,
                Numeric_Format__c = NUMERIC_FORMAT
           )
        );
        
        billingFormats.add(
            new Billing_Format__c(
                Name = 'Default Billing Service',
                Visualforce_PDF_Page__c = BILLING_SERVICE_PDF_PAGE,
                Default_Email_Template__c = BILLING_EMAIL_TEMPLATE,
                Type__c = 'Billing',
                Image__c = '<img alt="Accounting Seed Logo" src="data:image/jpeg;base64,' + BILLING_FORMAT_IMAGE + '"></img>',
                Currency_Format__c = CURRENCY_FORMAT,
                Numeric_Format__c = NUMERIC_FORMAT
           )
        );
        
        billingFormats.add(
            new Billing_Format__c (
                Name = 'Default Billing Outstanding Statement',
                Visualforce_PDF_Page__c = OUTSTANDING_PDF_PAGE,
                Default_Email_Template__c = OUTSTANDING_EMAIL_TEMPLATE,
                Type__c = 'Outstanding Statement',
                Image__c = '<img alt="Accounting Seed Logo" src="data:image/jpeg;base64,' + BILLING_FORMAT_IMAGE + '"></img>',
                Currency_Format__c = CURRENCY_FORMAT,
                Numeric_Format__c = NUMERIC_FORMAT
           )
        );
        
        billingFormats.add(
            new Billing_Format__c (
                Name = 'Default Billing Activity Statement',
                Visualforce_PDF_Page__c = ACTIVITY_PDF_PAGE,
                Default_Email_Template__c = ACTIVITY_EMAIL_TEMPLATE,
                Type__c = 'Activity Statement',
                Image__c = '<img alt="Accounting Seed Logo" src="data:image/jpeg;base64,' + BILLING_FORMAT_IMAGE + '"></img>',
                Currency_Format__c = CURRENCY_FORMAT,
                Numeric_Format__c = NUMERIC_FORMAT
           )
        );

        SFDCSecurityUtils.insertProxy(billingFormats);

        //create default Ledgers: Transactional and Budget
        ledgers = new List<Ledger__c>();

        ledgers.add(
            new Ledger__c(
                Name = 'Actual',
                Type__c = 'Transactional',
                Default_Bank_Account__c = glAccounts[0].Id,
                Default_Billing_Format__c = billingFormats[0].Id,
                Billing_Outstanding_Statement_Format__c = billingFormats[2].Id,
                Billing_Activity_Statement_Format__c = billingFormats[3].Id
            )
        );

        ledgers.add(new Ledger__c(Name = 'Budget', Type__c = 'Budget'));

        SFDCSecurityUtils.insertProxy(ledgers);

        //create tax settings and link with ledger
        createAndSetTaxSettings();

        //Default Transactional Ledger will be used as a default ledger for org default value of custom setting
        ledgerSettings = Ledger_Custom_Settings__c.getOrgDefaults();
        ledgerSettings.Ledger_Id__c = ledgers[0].Id;

        SFDCSecurityUtils.insertProxy(ledgerSettings);

        settings = new List<Accounting_Settings__c>();
        
        settings.add(
            new Accounting_Settings__c(
                Labor_GL_Account__c = glAccounts[18].Id,
                Payment_Discount_GL_Account__c = glAccounts[13].Id,
                Default_Ledger__c = ledgers[0].Id,
                Legacy_Default_Ledger__c = ledgers[0].Id,
                Ledger_Limit__c = 1,
                Default_Project_Task_Labor_GL_Account__c = glAccounts[14].Id,
                Enable_Product_Costing__c = true,
                Work_in_Process_GL_Account__c = glAccounts[3].Id,
                Vouchers_Payable_GL_Account__c = glAccounts[5].Id,
                Customer_Payment_Adjustment_GL_Account__c = glAccounts[19].Id,
                Prepaid_Expense_GL_Account__c = glAccounts[21].Id,
                Display_Billable_Flag_in_Time_Card_Entry__c = true,
                Default_Credit_GL_Account_Expense__c = glAccounts[27].Id,
                Default_Credit_GL_Account_Revenue__c = glAccounts[10].Id,
                Default_Debit_GL_Account_Revenue__c = glAccounts[23].Id,
                Credit_Memo_Default__c = 'Amount',
                Enable_Billing_Period_Sensitive_Aging__c=true,
                Enable_AP_Period_Sensitive_Aging__c=true
            )
        );

        AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = true;
        AccountingSettingsActions.isPreventUpdateOverride = true;
        SFDCSecurityUtils.insertProxy(settings);
        AccountingSettingsActions.isPreventUpdateOverride = false;
        AccountingSettingsActions.skipPreventUpdatePostSettingsValidations = false;
        
        Date acctDate = Date.newInstance(System.today().year(), System.today().month()-3, 1);
        acctPeriods = new List<Accounting_Period__c>();
        
        for (Integer i = 0; i < 15; i++) {
            acctPeriods.add(
                new Accounting_Period__c(
                    Name = String.valueOf(acctDate.year()) + '-' + (acctDate.month() > 9 ? String.valueOf(acctDate.month()) : '0' + String.valueOf(acctDate.month())),
                    Start_Date__c = Date.newInstance(acctDate.year(), acctDate.month(), 1),
                    End_Date__c = Date.newInstance(acctDate.year(), acctDate.month(), Date.daysInMonth(acctDate.year(),acctDate.month())),
                    Status__c = AccountingPeriodActions.OPEN_STATUS
                )
            );
            
            if (acctDate.month() == 12) {
                acctDate = Date.newInstance(acctDate.year()+1,1,1);
            }
            else {
                acctDate = acctDate.addMonths(1);
            }
        }
        
        SFDCSecurityUtils.insertProxy(acctPeriods);
        
        timeCardPeriods = new List<Time_Card_Period__c>();
        
        Date startOfWeek = acctPeriods[1].Start_Date__c.toStartOfWeek();
        
        if (startOfWeek.month() != acctPeriods[1].Start_Date__c.month()) {
            startOfWeek = startOfWeek + 7;
        }
        
        timeCardPeriods.add(
            new Time_Card_Period__c(
                Name = 'Week Beginning ' + DateTime.newInstance(startOfWeek.year(), startOfWeek.month(), startOfWeek.day()).format('yyyy-MM-dd'),
                Start_Date__c = startOfWeek,
                End_Date__c = startOfWeek + 7,
                Status__c = AccountingPeriodActions.OPEN_STATUS
            )
        );
        
        startOfWeek = startOfWeek + 7;
        timeCardPeriods.add(
            new Time_Card_Period__c(
                Name = 'Week Beginning ' + DateTime.newInstance(startOfWeek.year(), startOfWeek.month(), startOfWeek.day()).format('yyyy-MM-dd'),
                Start_Date__c = startOfWeek,
                End_Date__c = startOfWeek + 7,
                Status__c = AccountingPeriodActions.OPEN_STATUS
            )
        );
        
        startOfWeek = startOfWeek + 7;
        timeCardPeriods.add(
            new Time_Card_Period__c(
                Name = 'Week Beginning ' + DateTime.newInstance(startOfWeek.year(), startOfWeek.month(), startOfWeek.day()).format('yyyy-MM-dd'),
                Start_Date__c = startOfWeek,
                End_Date__c = startOfWeek + 7,
                Status__c = AccountingPeriodActions.OPEN_STATUS
            )
        );
        
        SFDCSecurityUtils.insertProxy(timeCardPeriods);

        setupAccountingPeriodRecurringTaskSampleData();
    }
}